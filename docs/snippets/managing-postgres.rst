Managing PostgreSQL With Make
=============================
This code snippet contains a Makefile with targets for managing a PostgreSQL
database. It works whether you have PostgreSQL installed natively or are
running it in a container with the post mapped locally. Save the code to,
`backend/postgres.mk`, it will be included by the main Makefile.

IMPORTANT: Remember to convert the indentations to tabs.

The Makefile uses the following variables for the targets:

..  code-block::
    postgres_user=postgres
    postgres_password=postgres
    postgres_db=postgres
    postgres_port=5432

You can edit these directly or update them to be set from environment variables:

..  code-block::
    postgres_user=$(POSTGRES_USER)
    postgres_password=$(POSTGRES_PASSWORD)
    postgres_db=$(POSTGRES_DB)
    postgres_port=$(POSTGRES_PORT)

That way you can keep the configuration in sync across the project.

The Makefile exports the `environment variables: <https://www.postgresql.org/docs/current/libpq-envars.html>`_
used by PostgreSQL's command line tools so no arguments need to be passed
when running the commands called by the target:

..  code-block::
    export PGHOST=localhost
    export PGPORT=$(postgres_port)
    export PGUSER=postgres
    export PGPASSWORD=postgres

PGUSER and PGPASSWORD are for any account which has permission to create
databases. For local development this will normally be the default postgres
user. PGPASSWORD is particularly useful to avoid having to enter it for
each command. You will need to configure the server to allow username/password
(md5) authentication on local (socket) connections and so avoid having to
su to the postgres user first.

..  code-block::
    # /etc/postgresql/15/main/pg_hba.conf
    # local    all    all    md5


..  code-block:: makefile
    # ##############
    #   PostgreSQL
    # ##############
    # Targets for managing a PostgreSQL database.

    # This file only runs with GNU Make since it assume the $(django)
    # variable, used in the scrubdb target, is set by a parent Makefile
    # that this file is included into. Set the variable directly if you
    # want to use it standalone.
    # django=./venv/bin/python manage.py

    # Parameters used by the commands in the targets.
    postgres_user=postgres
    postgres_password=postgres
    postgres_db=postgres
    postgres_port=5432

    # Export the environment variables used by the PostgreSQL command line tools
    # so they can be picked up by the targets running in spawned processes.
    export PGHOST=localhost
    export PGPORT=$(postgres_port)
    export PGUSER=postgres
    export PGPASSWORD=postgres

    # The file to use when loading the database. Either plain text or compressed
    # (gzipped) files generated by pg_dump may be used. Other formats are not
    # supported.
    db_file=postgres.sql.gz

    .PHONY: createrole
    createrole:
        psql --command "create role $(postgres_user) with password '$(postgres_password)' login createdb;"

    .PHONY: droprole
    droprole:
        psql --command "drop role $(postgres_user);"

    .PHONY: createdb
    createdb:
        createdb --owner $(postgres_user) $(postgres_db)

    .PHONY: dropdb
    dropdb:
        dropdb --if-exists $(postgres_db)

    .PHONY: cleandb
    cleandb: dropdb droprole

    .PHONY: initdb
    initdb: createrole createdb

    .PHONY: dumpdb
    dumpdb:
        pg_dump --compress 9 --file $(db_file).sql.gz $(postgres_db)

    .PHONY: loaddb
    loaddb:
        if (file $(db_file) | grep -q compressed); then \
            gunzip < $(db_file) | psql $(postgres_db); \
        else \
            psql -f $(db_file) $(postgres_db); \
        fi

    # Scrub the database to remove any awkward situations, like sending
    # production users emails from development. Reset the password for
    # all users, including the admin, to "password". The $(django)
    # variable will be set when this file is included into the main
    # Makefile for the project.

    .PHONY: scrubdb
    scrubdb:
        # psql --command "<insert SQL command here>" $(postgres_db)
        $(django) set_fake_passwords

    .PHONY: refreshdb
    refreshdb: dropdb createdb loaddb scrubdb
